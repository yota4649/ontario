buildscript {
  repositories {
    maven {url 'http://developer.marklogic.com/maven2/'}
  }
}

plugins {
  id 'java'
  id 'eclipse'
  id 'idea'

  // This plugin allows you to create different environments
  // for your gradle deploy. Each environment is represented
  // by a gradle-${env}.properties file
  // See https://github.com/stevesaliman/gradle-properties-plugin
  // specify the env on the command line with:
  // gradle -PenvironmentName=x ...
  id 'net.saliman.properties' version '1.4.6'

  // This gradle plugin extends the ml-gradle plugin with
  // commands that make Data Hub do its magic
  id 'com.marklogic.ml-data-hub' version '5.4.4'
}

repositories {
  jcenter()
  maven {url 'http://developer.marklogic.com/maven2/'}
}

configurations {
  mlcp
}

dependencies {
  // this allows you to write custom java code that depends
  // on the Data Hub library
  compile 'com.marklogic:marklogic-data-hub:5.4.4'
  mlcp "com.marklogic:mlcp:10.0.4.2"
  mlcp files("lib")
}

task loadCSVperiod(type: com.marklogic.gradle.task.MlcpTask) {
database = mlStagingDbName
port = mlStagingPort.toInteger()
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
      "-input_file_path", "$project.projectDir/csv-data/Period/",
      "-output_collections", "Period-Table.csv",
      "-output_permissions", "data-hub-operator,read",
      "-input_file_type", "delimited_text",
      "-document_type", "json",
      "-generate_uri","true",
      "-modules_root", "/",
  ]
}
task loadCSVemployee(type: com.marklogic.gradle.task.MlcpTask) {
database = mlStagingDbName
port = mlStagingPort.toInteger()
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
      "-input_file_path", "$project.projectDir/csv-data/employee-roster/",
      "-output_collections", "EmployeeTable.csv",
      "-output_permissions", "data-hub-operator,read",
      "-input_file_type", "delimited_text",
      "-document_type", "json",
      "-generate_uri","true",
      "-modules_root", "/",
  ]
}
task loadCSVwellness(type: com.marklogic.gradle.task.MlcpTask) {
database = mlStagingDbName
port = mlStagingPort.toInteger()
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
      "-input_file_path", "$project.projectDir/csv-data/Wellness/",
      "-output_collections", "WellnessSurvey.csv",
      "-output_permissions", "data-hub-operator,read",
      "-input_file_type", "delimited_text",
      "-document_type", "json",
      "-generate_uri","true",
      "-modules_root", "/",
  ]
}
task loadCSVkronos(type: com.marklogic.gradle.task.MlcpTask) {
database = mlStagingDbName
port = mlStagingPort.toInteger()
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
      "-input_file_path", "$project.projectDir/csv-data/Kronos/",
      "-output_collections", "Kronos.csv",
      "-output_permissions", "data-hub-operator,read",
      "-input_file_type", "delimited_text",
      "-document_type", "json",
      "-generate_uri","true",
      "-modules_root", "/",
  ]
}
task loadCSVworkday(type: com.marklogic.gradle.task.MlcpTask) {
database = mlStagingDbName
port = mlStagingPort.toInteger()
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
      "-input_file_path", "$project.projectDir/csv-data/WorkDay/",
      "-output_collections", "PayrollExpenseJournalLine_WD_LTD.csv",
      "-output_permissions", "data-hub-operator,read",
      "-input_file_type", "delimited_text",
      "-document_type", "json",
      "-generate_uri","true",
      "-modules_root", "/",
  ]
}
task loadCSVpeoplesoft(type: com.marklogic.gradle.task.MlcpTask) {
database = mlStagingDbName
port = mlStagingPort.toInteger()
  classpath = configurations.mlcp
  command = "IMPORT"
  args = [
      "-input_file_path", "$project.projectDir/csv-data/PeopleSoft/",
      "-output_collections", "PeopleSoftHRData.csv",
      "-output_permissions", "data-hub-operator,read",
      "-input_file_type", "delimited_text",
      "-document_type", "json",
      "-generate_uri","true",
      "-modules_root", "/",
  ]


task loadallcsv {
  dependsOn loadCSVperiod
  dependsOn loadCSVemployee
  dependsOn loadCSVwellness
  dependsOn loadCSVkronos
  dependsOn loadCSVworkday
  dependsOn loadCSVpeoplesoft
}

}
task loademployeeperiod(type: com.marklogic.gradle.task.ServerEvalTask) {
  client = hubConfig.newStagingClient()
  javascript = 'xdmp.invoke("/custom-modules/buildemployeeperiod.sjs")'
}

loademployeeperiod.mustRunAfter loadallcsv

task createRedactionRules(type: com.marklogic.gradle.task.HubTask) {
  doFirst {
    def file = new File("employee-17104-data/redactionRules/redactionRules2Roles.json")
    if (file.exists()) {
      def meta = new DocumentMetadataHandle()
      meta.getCollections().addAll("redactionRules");
		  meta.getPermissions().add("rest-reader", DocumentMetadataHandle.Capability.READ);
      getFinalClient().newDocumentManager().write("/redactionRules2Roles.json", meta, new StringHandle(file.text))
    }
  }
}
createRedactionRules.mustRunAfter loademployeeperiod

task ingestall  {
  dependsOn loadallcsv
  dependsOn loademployeeperiod
  dependsOn createRedactionRules
}  

task resetDBs(type: com.marklogic.gradle.task.ServerEvalTask) {
  javascript = 'xdmp.invoke("/envision/system/resetSystem.sjs")'
}

task resetDemo {
  dependsOn resetDBs
}

import com.marklogic.client.io.DocumentMetadataHandle
import com.marklogic.client.io.StringHandle

import com.marklogic.client.io.DocumentMetadataHandle;

mlLoadModules.mustRunAfter mlDeploy

task install {
  dependsOn mlDeploy
  dependsOn mlLoadModules
}

ext {
  // Configuration for loading the reference data documents under src/main/ml-data
  mlAppConfig.dataConfig.databaseName = mlStagingDbName
  // mlAppConfig.dataConfig.permissions = "flow-operator-role,read,flow-developer-role,update"
}
